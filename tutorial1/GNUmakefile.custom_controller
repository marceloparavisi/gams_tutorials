# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.custom_controller
#
# $Id: gnu.mpd 97944 2014-10-29 20:57:47Z shuston $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.custom_controller
DEPENDENCY_FILE  = .depend.custom_controller
BIN_UNCHECKED    = custom_controller

LIB_PREFIX      ?= lib

FILES = \
  $(VREP_ROOT)/programming/remoteApi/extApi.c \
  $(VREP_ROOT)/programming/remoteApi/extApiPlatform.c \
  src/controller.cpp \
  src/algorithms/producer.cpp \
  src/algorithms/consumer.cpp

VPATH = .:src/algorithms:$(VREP_ROOT)/programming/remoteApi:src

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
LDLIBS = -lACE -lMADARA -lGAMS

PRJ_TYPE = rtp

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSBIN ?= $(call COLLAPSE_SLASHES,bin)
ifeq ($(INSBIN),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSBIN = $(PWD)
endif
OUTPUT_DIRECTORY = $(if $(ARCH),$(if $(INSBIN),$(INSBIN)/$(ARCH)),$(INSBIN))

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU


GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/custom_controller
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    ifeq ($(LIBCHECK_PREFIX),)
      # If the user hasn't specified a place to look for installed libraries, let's set
      # a reasonable default
      LIBCHECK_PREFIX = /usr
    endif
    LIBCHECK ?= $(filter-out $(foreach lib,ACE MADARA GAMS,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) $(GAMS_ROOT)/lib $(if $(ARCH),$(GAMS_ROOT)/lib/$(ARCH)) $(MADARA_ROOT)/lib $(if $(ARCH),$(MADARA_ROOT)/lib/$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) $(LIBCHECK_PREFIX)/lib $(LIBCHECK_PREFIX)/lib64 $(LIBCHECK_EXTRA_PATHS) $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),ACE MADARA GAMS)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(vrep),1)
ifeq ($(LIBCHECK), 1)
BIN    = $(BIN_UNCHECKED)$(EXEEXT)
ifdef ARCH
  ARCH_BIN = $(ARCH)/$(BIN)
endif #ARCH
else
  all: lib_warning
endif
else
  all: require_warning
endif

# If it contains ../ at all use notdir.
OBJS   = $(foreach var, $(addsuffix .$(OBJEXT), $(basename $(FILES)) $(RESOURCES)), $(if $(findstring ../,$(var)),$(notdir $(var)),$(var)))
SRC    = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU

ifneq ($(INSBIN),)
ifneq ($(INSBIN),.)
  INSTALL = $(VBIN:%=$(INSBIN)/%)
  CLEANUP_INSTALL += $(CLEANUP_BIN:%=$(INSBIN)/$(if $(ARCH),$(ARCH)/)%$(VAR)$(EXEEXT))
endif
endif

include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

$(VDIR)$(VREP_ROOT)/programming/remoteApi/extApi.$(OBJEXT): $(VREP_ROOT)/programming/remoteApi/extApi.c
	@$(MKDIR) $(VDIR)$(VREP_ROOT)/programming/remoteApi
	$(COMPILE.c) $(ACE_USE_PCH_OPT) $(CC_OUTPUT_FLAG)$(CC_OUTPUT_FLAG_SEP)$@ $<
	${MVCMD}

ifneq ($(VSHDIR), $(VDIR))
$(VSHDIR)$(VREP_ROOT)/programming/remoteApi/extApi.$(OBJEXT): $(VREP_ROOT)/programming/remoteApi/extApi.c
	@$(MKDIR) $(VSHDIR)$(VREP_ROOT)/programming/remoteApi
	$(COMPILE.c) $(ACE_USE_PCH_OPT) $(PIC) $(CC_OUTPUT_FLAG)$(CC_OUTPUT_FLAG_SEP)$@ $<
endif

$(VDIR)$(VREP_ROOT)/programming/remoteApi/extApiPlatform.$(OBJEXT): $(VREP_ROOT)/programming/remoteApi/extApiPlatform.c
	@$(MKDIR) $(VDIR)$(VREP_ROOT)/programming/remoteApi
	$(COMPILE.c) $(ACE_USE_PCH_OPT) $(CC_OUTPUT_FLAG)$(CC_OUTPUT_FLAG_SEP)$@ $<
	${MVCMD}

ifneq ($(VSHDIR), $(VDIR))
$(VSHDIR)$(VREP_ROOT)/programming/remoteApi/extApiPlatform.$(OBJEXT): $(VREP_ROOT)/programming/remoteApi/extApiPlatform.c
	@$(MKDIR) $(VSHDIR)$(VREP_ROOT)/programming/remoteApi
	$(COMPILE.c) $(ACE_USE_PCH_OPT) $(PIC) $(CC_OUTPUT_FLAG)$(CC_OUTPUT_FLAG_SEP)$@ $<
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(GAMS_ROOT)/lib -L$(MADARA_ROOT)/lib -L$(ACE_ROOT)/lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(GAMS_ROOT)/lib $(if $(ARCH),-L$(GAMS_ROOT)/lib/$(ARCH)) -L$(MADARA_ROOT)/lib $(if $(ARCH),-L$(MADARA_ROOT)/lib/$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH))
endif
CPPFLAGS     += -I$(GAMS_ROOT)/src -I$(MADARA_ROOT)/include -I$(ACE_ROOT) -I$(VREP_ROOT)/programming/remoteApi -I$(VREP_ROOT)/programming/include
CPPFLAGS     += -D_GAMS_VREP_ -DMAX_EXT_API_CONNECTIONS=255 -DNON_MATLAB_PARSING -D_USE_MATH_DEFINES
CPPFLAGS     += -std=c++11 -g -Og -Wextra -pedantic
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS
  ifeq ($(link_groups), 1)
    LDLIBS := -Wl,--start-group $(LDLIBS) -Wl,--end-group
  endif
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
CPPFLAGS += -w

lib_warning:
	@echo custom_controller will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(vrep),1)
requires_disabled_macros += vrep
endif
require_warning:
	@echo custom_controller will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif


ifneq ($(VXWORKSLINK),1)
ifeq ($(static_libs_only), 1)
  ifeq ($(use_dep_libs), 1)
    DEPLIBS = $(foreach lib, ACE MADARA GAMS , $(foreach libpath, . $(GAMS_ROOT)/lib $(MADARA_ROOT)/lib $(ACE_ROOT)/lib, $(wildcard $(libpath)/$(LIB_PREFIX)$(lib).$(LIBEXT))))
  endif
endif

$(VBIN): $(addprefix $(VDIR), $(OBJS)) $(DEPLIBS)
  ifneq (,$(LINK.cc.override))
	$(LINK.cc.override)
  else
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $@ $(filter-out %.a,$^) $(VLDLIBS) $(POSTLINK)
  endif
endif


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifeq ($(vrep),1)
	@-:
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
UNAME := $(shell uname)
ifeq ($(UNAME), HP-UX)
LDFLAGS += -Wl,+s,+b,$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
else
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif
endif


DEPFILES=$(patsubst %.cpp,%.d,$(filter %.cpp,$(FILES)))

%.d : %.cpp
	$(CXX) $(CPPFLAGS) -MM -MG -MT .obj/$(@:.d=.o) -o $@ $<

cleandep :
	rm -f $(DEPFILES)

clean : cleandep

-include $(DEPFILES)

